생정자주입

예시(OrderServiceImpl)

생성자에 Autowired를 하면
Component scan하면서 스프링빈에 등록할떄 (등록이되면 생성자 호출해야함)
생성자 호출하면서 Autowired가 있네? 하면

스프링 컨테이너에서 스프링빈을 꺼냄 MemberRepository 와 DiscountPolicy 을 꺼내서 
딱 주입해준다.

생성자 호출시점에 딱 1번만 호출되는 것이 보장된다 되는데
이말은 즉 잘짜면 딱 한번 세팅하고 그다음부터는 이값을 셋팅못하게 막을수있다.
MemberRepository 와 DiscountPolicy 는 값이 무조건 있어야된다.

생성자가 한개만 딱 있으면 Autowired 생략 가능.


수정자 주입(setter 주입)


    private MemberRepository memberRepository;
    private DiscountPolicy discountPolicy;

    public void setMemberRepository(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
    }
    public void setDiscountPolicy(DiscountPolicy discountPolicy) {
        this.discountPolicy = discountPolicy;
    }

필드값을 직접 수정하기 그래서 setter를 처리하는데 이걸 "수정자"라고 한다.
그리고     Autowired 를 setter에 준다면 주입이된다.

스프링 컨테이너 : 스프링 빈을 등록, 연관관계를 자동으로 주입

생성자 주입은 자연스럽게 진핸된다.
자바 스프링이 OrderServiceImpl 객체를 생성하고 생성자를 부른다.


다른 주입은?
수정자자는 setter 만들고 autowired를 해서 주입이 일어난다.
setter 주입의 경우 순서를 보장되지 않는다.

이렇게 setter 주입이 일어나면
    @Autowired
    public void setMemberRepository(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
    }
    @Autowired
    public void setDiscountPolicy(DiscountPolicy discountPolicy) {
        this.discountPolicy = discountPolicy;
    }

생성자 주입을 굳이 할 필요가 없어진다.

생성자였다면 필수값이 였는데
setter의 경우 필수가 아니다 
만약 MemberRepository 가 스프링 빈에 등록이 안되어있을수 있다
그럴때도 사용이 가능하다는것 이렇게 선택적인 의존관계가 되는것이다.

이렇게 선택적으로 할 경우 (required = false) 를 해주면 된다.

필드주입은 

    @Autowired private MemberRepository memberRepository;
    @Autowired private DiscountPolicy discountPolicy;

이렇게 하면 끝

일단 테스트를 위해

AppConfig 에서
    @Bean
    public OrderService orderService(){
        System.out.println("call AppConfig.orderService");
        // return new OrderServiceImpl(memberRepository(), discountPolicy());
        return null;
    }
이렇게만 처리



AutoAppConfigTest 가서 테스트 코드 추가 작성



개발하다 보니

사람들이 필드 주입이 생각보다 안좋은 안티패턴이구나를 깨달음
외부에서 변경이 불가능해서 테스트하기가 힘듬.


테스트를 위해
public class OrderServiceTest  를 추가해보면 

    @Test
    void filedInjectionTest(){
        OrderServiceImpl orderService = new OrderServiceImpl();
        orderService.createOrder(1L, "itemA", 10000);
    }

nullPointExcetion 이 터짐
그래서 값을 넣어주고 싶은데 내가 넣을수 있는곳이 없음
결국 서비스에 셋터를 따로 만들어줘야함


애플리케이션의 실제 코드와 관계 없는 테스트 코드 에서는 사용이 가능한데

CoreApplicationTests 요런 형식을 가서 보면 여기서
@Autowired
	OrderService orderService; 
등록을 하면

SpringBootTest 로 되어있으면, 스프링 컨테이너에 스프링빈을 다 올린다음에 
@Test 테스트 코드에서 바로 테스트 가능하다.
테스트코드에서 이러한 필드 Autowired을 해도 되는 이유로
테스트 코드를 누가 가져다 쓸 이유가 없기때문


또는 AutoAppConfig 에서 사용가능하다.

    @Bean
    OrderService orderService(){
        return new OrderServiceImpl();
    }
를 등록을 한다고 치면,


테스트를 위해
OrderServiceImpl 
    private final MemberRepository memberRepository;
    private final DiscountPolicy discountPolicy;

    public OrderServiceImpl(MemberRepository memberRepository, DiscountPolicy discountPolicy) {
        this.memberRepository = memberRepository;
        this.discountPolicy = discountPolicy;
    }
다시 살린다.

이제 내가

orderService를 빈으로 등록할껀데 autowired로 멤버리파지토리를 넣어야될까 
고민을 하던중

    @Autowired MemberRepository memberRepository;
    @Autowired
    DiscountPolicy discountPolicy;


    @Bean
    OrderService orderService(){
        return new OrderServiceImpl(memberRepository, discountPolicy);
    }
이렇게 넣어주면 된다.


일반 메서드 주입

아무 메서드에다가도 Autowired를 쓸슀다.
수정자 주입과 비슷한 기능

얘같은 경우 생성자 주입이나, 수정자 수입에서 끝나기 떄문에 딱히....
사용이 안됨