다시 스프링으로

스프링 이야기에 왜 객체 지향 이야기가 나오는가?

스프링은 다음 기술로 다형성 + OCP, DIP를 가능하게 지원

DI(Dependency Injection) : 의존관계, 의존성 주입
DI 컨테이너 제공


클라이언트 코드의 변경 없이 기능 확장
쉽게 부품을 교체하듯이 개발


정리
-모든 설계에 역할과 구현을 분리하자.
-자동차, 공연의 예를 떠올려보자.
-애플리케이션 설계도 공연을 설계 하듯이 배역만 만들어두고, 배우는 언제든지 유연하게
변경할 수 있도록 만드는 것이 좋은 객체 지향 설계다.
- 이상적으로 모든 설계에 인터페이스를 부여하자.

실무 고민

-하지만 인터페이스를 도입하면 추상화라는 비용이 발생한다.
-기능을 확장할 가능성이 없다면, 구체 클래스를 직접 사용하고, 향후 꼭 필요할때 리팩터링해서
인터페이스를 도입하는 것도 방법이다.


