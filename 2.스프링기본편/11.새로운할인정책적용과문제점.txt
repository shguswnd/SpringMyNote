이제 실제 적용해보자!

할인정책을 변경하려면 클라이언트인 OrderServiceImpl 코드를 고쳐야 한다(다형성)

우린 역할과 구현을 충실하게 분리했고,
다형성도 활용하고, 인터페이스와 구현 객체를 분리했다
**.
OCP, DIP 같은 객체지향 설계 원칙을 충실히 준수했다?
-> 그렇게 보이지만 사실은 아니다.

DIP 주문 서비스 클라이언트 OrderServiceImpl는 DiscountPolicy 인터페이스에 의존하면서
DIP를 지킨것 같은데?
클래스 의존관계를 분석해보면 추상(인터페이스)뿐만 아니라 구체(구현) 클래스에도 의존하고 있다.
추상(인터페이스) 의존 : DiscountPolicy
구체(구현)클래스 : FixDiscountPolicy, RateDiscountPolic

실제 OrderServiceImpl는 DiscountPolicy 만 의존하는게 아니라 구체(구현) 클래스도 전부 의존하고 있다.

이렇게되면 DIP 위배가 된다.
중요! FixDiscountPolicy 를 RateDiscountPolic 로 바꾸는 순간 OCP 위반이다.
예를들면 운전자는 기름차를 전기차로 바꿔도 탈수있어야되지만
운전자가 지금 기름차에서 전기차로 바꿨는데 운전면허증으로 해결되는게 아닌
라이센스 발급을 해야 사용이 가능한 형태인 것이다.

-->> 정책 변경


해결방법

DIP를 위반하지 않도록 인터페이스에만 의존하도록 의존관계를 변경하면 된다.


--시작--
OrderServiceImpl 클래스에서 
    //private final DiscountPolicy discountPolicy = new FixDiscountPolicy();
    private final DiscountPolicy discountPolicy = new RateDiscountPolicy();
두개의 내용을 전부 지우고 

private DiscountPolicy discountPolicy; 이렇게만 쓰면된다 (final을 지운건 무조건 값이 들어와야되서 지움.)

인터페이스만 의존한다 미쳤네?

하지만 이대로 실행을하면 구현체가 없으니 코드 실행이 안된다.

해결방안!!

이 문제를 해결하려면 누군가가 클라이언트인 : OrderServiceImpl 에 DiscountPolicy 의 구현 객체를 대신 생성하고
주입해주어야한다.