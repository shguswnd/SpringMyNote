테이블 연관관계의 경우 fk 로 양방향 다 알수 있다.
조인하고, 검색하면 양측을 다 볼 수 있음

문제는 객체...

팀에다가 리스트를 넣자!!!

@OneToMany(mappedBy = "team")
    private List<Member> members = new ArrayList<>();


mappedBy = "team" 는 나는 누구랑 연결되어 있지? 에서 멤버의 team을 연결했다는걸 표시한다.

            List<Member> members = findMember.getTeam().getMembers();

이게 바로 양방향이며 
처음 findMember 인 멤버에서 getTeam 팀으로 이동하고 다시 .getMembers 멤버로 리턴을 한다.

객체는 최대한 단방향이 맞다 양방향이면 신경 쓸께 많아짐.











********************************************
mappedBy 사용하는법
********************************************
1.
객체와 테이블이 관계를 맺는 차이란??

객체 연관관계는 2개이다
멤버에서 -> 팀으로 가는 1개(단방향)
팀에서 -> 멤버로 가는 1개(단방향)


테이블 연관관계는 1개 하난이다(fk 값)
fk 값 하나로 조인하면 연관관계 끝
멤버 <-> 팀

------------------------------------------------------------------------------------------
2. 
객체의 양방향 관계는 사실 양방향 관계가 아니라 서로 다른 단방향 관계 2개이다.

------------------------------------------------------------------------------------------
3. 그렇다면 멤버와 팀중 누구로 외래키를 관리해야될까??

멤버에도 Team 이 있고 팀에서도 멤버리스트의 정보가 있다
멤버테이블의 FK인 TEAM_ID는 두 객체에서 다 가지고 놀수 있다...
여기서 스프링은 정의를 한다.
주인을 정하기 위한


------------------------------------------------------------------------------------------
연관관계의 주인

양방향 매핑 규칙

- 객체의 두 관계중 하나의 연관관계의 주인으로 지정
- 연관관계의 주인만이 외래키를 관리(등록, 수정)
- 주인이 아닌쪽은 읽기만 가능
- 주인은 mappedBy 속성 사용x
- 주인이 아니면 mappedBy 속성으로 주인 지정
mappedBy 뜻이 내가 저기에 의해서 매핑이 되었어..


