ifPresent : 값이 있는지 (null이 아닐때)
m ->  람다로 확인
        result.ifPresent(m -> {
            throw new IllegalStateException("이미 존재하는 회원입니다.");
        });

이전에는 if null이 아니면 을 사용했으나.

optional을 사용하다 보니 사용 가능

원래 이전에 
 Optional<Member> result = memberRepository.findByName(member.getName());
값을 만들어 result를 사용하여 ifPresent를 사용했으니나 optional을 바로 사용하지 않고
        memberRepository.findByName(member.getName())
                .ifPresent(m -> {
                    throw new IllegalStateException("이미 존재하는 회원입니다.");
                });

코드를 더욱 깔끔하게 만든다.


get 대신 사용
orElseGet 사용하여 값이 있으면 꺼내고 없으면 default 준것으로 꺼내도록
사용함.

서비스의 메서드들은 좀더 비지니스에 가깝게 네이밍을 해야한다.





테스트
테스트는 과감하게 한글로 바꿔도 된다!!



테스트에서

    public void 중복_회원_예외(){
        //given
        Member member1 = new Member();
        member1.setName("spring");

        Member member2 = new Member();
        member2.setName("spring");
        //when
        memberService.join(member2);
        try {
            memberService.join(member2);
            fail();
        }catch (IllegalStateException e){ //예외 터져야 정상 동작
            assertThat(e.getMessage()).isEqualTo("이미 존재하는 회원입니다.");
        }
값의 트라이 캐치문의 예외 문장이 서비스의 예외문장과 동일해야한다.
만약 다르면 테스트 코드에서 에러터짐
이것때문에 이런식이 아닌 다른 방법으로 예외처리 테스트 진행한다.


디펜던싱 인젝션
싱글톤과 비슷하게 객체를 생성하면 주소가 달라지니깐
테스트 케이스도 동일한 데이터 사용을 위하여
생성자를 통해 new 할 수 있게 하였다.

멤버 서비스 

  private final MemberRepository memberRepository;

//= new MemoryMemberRepository();

    public MemberService(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
    }







/** 
주석 자동 생성 ctl + enter

리턴값 자동 생성
ctrl + alt + v

리팩토리 매뉴얼 열기 ctrl + t 

메소드 자동 만들기 
ctrl + alt + m

테스트 자동으로 만들기
ctrl + shift + t

이전 실행부분 실행
시프트 + F10

생성자 단축키, 게터셋터
alt + insert