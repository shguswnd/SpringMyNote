AOP란 
모든 메소드의 시간 측정을 해보라 시켰을때,

각 메소드마다 건드는게 아닌 핵심관심과 공통관심을 분리하여

관점지향 프로그램을 만드는것이다.


AOP 만드는법

aop 패키지 만들기 -> TimeTraceAop 클래스를 만들어 시간 측정 class를 만듬


joinPoint.proceed(); // 다음 메소드로 진입한다.
joinPoint.toString() // 어떤 메소드를 콜하는지.


        long start = System.currentTimeMillis();
        System.out.println("START : " + joinPoint.toString());
        try {
            return joinPoint.proceed();
        } finally {
            long finish = System.currentTimeMillis();
            long timeMs = finish - start;
            System.out.println("END : " + joinPoint.toString() + " " + timeMs + "ms");
        }

프로그램을 작성하고

스프링 bran으로 등록해주는데

클래스에 @Component 컴포넌트 스캔을 넣어도 되지만..

컨피그에서 bean으로 등록해서 쓰는게 트랜드이다.


등록을 해서 아 aop는 bean으로 등록해서 쓰였구나로 바로 직관적으로 알수있어서 좋음


일단 여기서는 Component로 등록하겠다.


    @Around("excution(* hello.hellospring..*(..))")
패키지명 : hello
거기 및에 경로 : hellospring
클래스 명 : ..*
파라미터 타입 : ..
을 사용하여 넣을수 있고
지금은 hello 패키지 하위 다 적용시켰다.

서비스만 찍고싶다면
    @Around("execution(* hello.hellospring.service..*(..))")
이렇게 찍으면 된다,


aop 적용하여 서비스까지 경로를 넣어 만들면 스프링에서는 가짜 멤버 서비스 만든다.
스프링은 그래서 컨테이너를 불러올때 가짜 스프링빈을 먼저 시작하고 가짜가 끝나면 실제 멤버 서비스를 불러준다.

실제로 확인해 보고 싶다면 컨트롤러 멤버서비르 호출하는 부분에서
        System.out.println("memberServicec = " + memberService.getClass());
찍어서 확인을 해보면

memberServicec = class hello.hellospring.service.MemberService$$SpringCGLIB$$0
이렇게 만들어 지며 MemberService$$SpringCGLIB$$0
멤버서비스 주소 뒤에 이상한 값들이 생성이된다. 이부분이 $$SpringCGLIB$$0 스프링에서 멤버서비스를 가지고 복제하여 조작하는 기술이다.




파일명 변경 단축키
shift + f6
